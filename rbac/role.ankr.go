// Code generated by protoc-gen-ankr. DO NOT EDIT.
// source: proto/role.proto

package rbac

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	math "math"

	logger "github.com/Ankr-network/dccn-tools/logger"
	zap "github.com/Ankr-network/dccn-tools/zap"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoleAddRequest struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Memo                 string   `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleAddRequest) Reset()         { *m = RoleAddRequest{} }
func (m *RoleAddRequest) String() string { return proto.CompactTextString(m) }
func (*RoleAddRequest) ProtoMessage()    {}
func (*RoleAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{0}
}

func (m *RoleAddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleAddRequest.Unmarshal(m, b)
}
func (m *RoleAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleAddRequest.Marshal(b, m, deterministic)
}
func (m *RoleAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleAddRequest.Merge(m, src)
}
func (m *RoleAddRequest) XXX_Size() int {
	return xxx_messageInfo_RoleAddRequest.Size(m)
}
func (m *RoleAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleAddRequest proto.InternalMessageInfo

func (m *RoleAddRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoleAddRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleAddRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type RoleAddResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoleAddResponse) Reset()         { *m = RoleAddResponse{} }
func (m *RoleAddResponse) String() string { return proto.CompactTextString(m) }
func (*RoleAddResponse) ProtoMessage()    {}
func (*RoleAddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{1}
}

func (m *RoleAddResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleAddResponse.Unmarshal(m, b)
}
func (m *RoleAddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleAddResponse.Marshal(b, m, deterministic)
}
func (m *RoleAddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleAddResponse.Merge(m, src)
}
func (m *RoleAddResponse) XXX_Size() int {
	return xxx_messageInfo_RoleAddResponse.Size(m)
}
func (m *RoleAddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleAddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoleAddResponse proto.InternalMessageInfo

func (m *RoleAddResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type RoleDelRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleDelRequest) Reset()         { *m = RoleDelRequest{} }
func (m *RoleDelRequest) String() string { return proto.CompactTextString(m) }
func (*RoleDelRequest) ProtoMessage()    {}
func (*RoleDelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{2}
}

func (m *RoleDelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDelRequest.Unmarshal(m, b)
}
func (m *RoleDelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDelRequest.Marshal(b, m, deterministic)
}
func (m *RoleDelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDelRequest.Merge(m, src)
}
func (m *RoleDelRequest) XXX_Size() int {
	return xxx_messageInfo_RoleDelRequest.Size(m)
}
func (m *RoleDelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDelRequest proto.InternalMessageInfo

func (m *RoleDelRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RoleDelResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoleDelResponse) Reset()         { *m = RoleDelResponse{} }
func (m *RoleDelResponse) String() string { return proto.CompactTextString(m) }
func (*RoleDelResponse) ProtoMessage()    {}
func (*RoleDelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{3}
}

func (m *RoleDelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDelResponse.Unmarshal(m, b)
}
func (m *RoleDelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDelResponse.Marshal(b, m, deterministic)
}
func (m *RoleDelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDelResponse.Merge(m, src)
}
func (m *RoleDelResponse) XXX_Size() int {
	return xxx_messageInfo_RoleDelResponse.Size(m)
}
func (m *RoleDelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDelResponse proto.InternalMessageInfo

func (m *RoleDelResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type RoleModRequest struct {
	Role                 *Role    `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleModRequest) Reset()         { *m = RoleModRequest{} }
func (m *RoleModRequest) String() string { return proto.CompactTextString(m) }
func (*RoleModRequest) ProtoMessage()    {}
func (*RoleModRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{4}
}

func (m *RoleModRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleModRequest.Unmarshal(m, b)
}
func (m *RoleModRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleModRequest.Marshal(b, m, deterministic)
}
func (m *RoleModRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleModRequest.Merge(m, src)
}
func (m *RoleModRequest) XXX_Size() int {
	return xxx_messageInfo_RoleModRequest.Size(m)
}
func (m *RoleModRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleModRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleModRequest proto.InternalMessageInfo

func (m *RoleModRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type RoleModResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoleModResponse) Reset()         { *m = RoleModResponse{} }
func (m *RoleModResponse) String() string { return proto.CompactTextString(m) }
func (*RoleModResponse) ProtoMessage()    {}
func (*RoleModResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{5}
}

func (m *RoleModResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleModResponse.Unmarshal(m, b)
}
func (m *RoleModResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleModResponse.Marshal(b, m, deterministic)
}
func (m *RoleModResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleModResponse.Merge(m, src)
}
func (m *RoleModResponse) XXX_Size() int {
	return xxx_messageInfo_RoleModResponse.Size(m)
}
func (m *RoleModResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleModResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoleModResponse proto.InternalMessageInfo

func (m *RoleModResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type Role struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Memo                 string   `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Status               int64    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{6}
}

func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Role) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *Role) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type RoleQryRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size                 int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoleQryRequest) Reset()         { *m = RoleQryRequest{} }
func (m *RoleQryRequest) String() string { return proto.CompactTextString(m) }
func (*RoleQryRequest) ProtoMessage()    {}
func (*RoleQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{7}
}

func (m *RoleQryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleQryRequest.Unmarshal(m, b)
}
func (m *RoleQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleQryRequest.Marshal(b, m, deterministic)
}
func (m *RoleQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleQryRequest.Merge(m, src)
}
func (m *RoleQryRequest) XXX_Size() int {
	return xxx_messageInfo_RoleQryRequest.Size(m)
}
func (m *RoleQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoleQryRequest proto.InternalMessageInfo

func (m *RoleQryRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RoleQryRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *RoleQryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type RoleQryResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	Data                 []*Role   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Total                int64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RoleQryResponse) Reset()         { *m = RoleQryResponse{} }
func (m *RoleQryResponse) String() string { return proto.CompactTextString(m) }
func (*RoleQryResponse) ProtoMessage()    {}
func (*RoleQryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d895858b00dee792, []int{8}
}

func (m *RoleQryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleQryResponse.Unmarshal(m, b)
}
func (m *RoleQryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleQryResponse.Marshal(b, m, deterministic)
}
func (m *RoleQryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleQryResponse.Merge(m, src)
}
func (m *RoleQryResponse) XXX_Size() int {
	return xxx_messageInfo_RoleQryResponse.Size(m)
}
func (m *RoleQryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleQryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoleQryResponse proto.InternalMessageInfo

func (m *RoleQryResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *RoleQryResponse) GetData() []*Role {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RoleQryResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*RoleAddRequest)(nil), "rbac.RoleAddRequest")
	proto.RegisterType((*RoleAddResponse)(nil), "rbac.RoleAddResponse")
	proto.RegisterType((*RoleDelRequest)(nil), "rbac.RoleDelRequest")
	proto.RegisterType((*RoleDelResponse)(nil), "rbac.RoleDelResponse")
	proto.RegisterType((*RoleModRequest)(nil), "rbac.RoleModRequest")
	proto.RegisterType((*RoleModResponse)(nil), "rbac.RoleModResponse")
	proto.RegisterType((*Role)(nil), "rbac.Role")
	proto.RegisterType((*RoleQryRequest)(nil), "rbac.RoleQryRequest")
	proto.RegisterType((*RoleQryResponse)(nil), "rbac.RoleQryResponse")
}

func init() { proto.RegisterFile("proto/role.proto", fileDescriptor_d895858b00dee792) }

var fileDescriptor_d895858b00dee792 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0xfd, 0x35, 0xce, 0xfa, 0x13, 0x46, 0x2a, 0xc3, 0x2a, 0x55, 0x14, 0x4d, 0xa3, 0xca, 0xd3,
	0x34, 0x69, 0x35, 0x6c, 0x12, 0x0f, 0xbc, 0x0d, 0xed, 0x75, 0xd2, 0x16, 0x5e, 0x78, 0x43, 0xee,
	0x6c, 0x05, 0x43, 0x92, 0x1b, 0x62, 0xb7, 0x55, 0x41, 0xbc, 0xf0, 0x15, 0xf8, 0x68, 0xfb, 0x00,
	0x48, 0x88, 0x0f, 0x82, 0xfc, 0x27, 0x8d, 0xdb, 0x21, 0xd4, 0x37, 0xe7, 0x1c, 0xdf, 0x73, 0xae,
	0xcf, 0xbd, 0xc1, 0x87, 0x4d, 0x0b, 0x1a, 0x68, 0x0b, 0xa5, 0x98, 0xd9, 0x23, 0x89, 0xdb, 0x39,
	0xbb, 0x4b, 0x5f, 0x15, 0x52, 0x7f, 0x58, 0xcc, 0x67, 0x77, 0x50, 0xd1, 0x6a, 0x25, 0xf5, 0x27,
	0x58, 0xd1, 0x02, 0xce, 0xec, 0x95, 0xb3, 0x25, 0x2b, 0x25, 0x67, 0x1a, 0x5a, 0x45, 0x37, 0x47,
	0x57, 0x9d, 0x1e, 0x15, 0x00, 0x45, 0x29, 0x28, 0x6b, 0x24, 0x65, 0x75, 0x0d, 0x9a, 0x69, 0x09,
	0xb5, 0xf2, 0xec, 0xd8, 0xbb, 0x09, 0xd5, 0x40, 0xad, 0xbc, 0x63, 0xc6, 0xf1, 0x28, 0x87, 0x52,
	0x5c, 0x72, 0x9e, 0x8b, 0xcf, 0x0b, 0xa1, 0x34, 0x49, 0x71, 0xac, 0xd7, 0x8d, 0x48, 0x06, 0xd3,
	0xc1, 0xc9, 0xa3, 0x37, 0xc3, 0x5f, 0x3f, 0x9f, 0x47, 0xef, 0x06, 0xb9, 0xc5, 0x0c, 0x57, 0xb3,
	0x4a, 0x24, 0xd1, 0x36, 0x67, 0x30, 0xc3, 0x55, 0xa2, 0x82, 0x04, 0x6d, 0x73, 0x06, 0xcb, 0x2e,
	0xf0, 0x93, 0x8d, 0x8b, 0xb3, 0x27, 0x53, 0x8c, 0x5a, 0xd5, 0x58, 0x97, 0xc7, 0xe7, 0xa3, 0x99,
	0x79, 0xf8, 0xac, 0x23, 0x73, 0x43, 0x65, 0x27, 0xae, 0xb5, 0x2b, 0x51, 0x76, 0xad, 0x4d, 0x70,
	0x24, 0xb9, 0x2d, 0x41, 0xce, 0xe0, 0xf0, 0xbf, 0x3c, 0x92, 0xbc, 0x93, 0xb7, 0x37, 0xf7, 0x96,
	0x7f, 0xe1, 0xe4, 0xaf, 0x61, 0xf3, 0xf2, 0x63, 0x1c, 0x9b, 0x59, 0xf8, 0x22, 0xec, 0x8b, 0xa0,
	0x14, 0xb9, 0xc5, 0x3b, 0x1b, 0x5b, 0xb1, 0xb7, 0xcd, 0x47, 0x1c, 0x9b, 0x22, 0x32, 0xea, 0x7b,
	0x37, 0x3d, 0x13, 0x12, 0x46, 0xe9, 0x23, 0x24, 0x3e, 0x7a, 0xe4, 0x30, 0x1b, 0x39, 0xf1, 0xb1,
	0xc6, 0x0e, 0x33, 0x67, 0x32, 0xc1, 0x43, 0xa5, 0x99, 0x5e, 0xa8, 0xe4, 0xc0, 0xea, 0xf9, 0xaf,
	0x6e, 0x98, 0xb7, 0xed, 0x3a, 0x18, 0x66, 0xc3, 0x0a, 0xb1, 0x93, 0x99, 0xc5, 0x0c, 0xa7, 0xe4,
	0x17, 0xd7, 0x41, 0xc0, 0x19, 0x6c, 0xb3, 0x04, 0xe8, 0xe1, 0x12, 0x64, 0xd2, 0xc5, 0x60, 0x5d,
	0xf6, 0x8d, 0xc1, 0x64, 0xcb, 0x99, 0x66, 0x49, 0x34, 0x45, 0xbb, 0xd9, 0x1a, 0x9c, 0x8c, 0xf1,
	0x81, 0x06, 0xcd, 0x4a, 0xeb, 0x88, 0x72, 0xf7, 0x71, 0x7e, 0x1f, 0xe1, 0xff, 0xcd, 0xa5, 0xb7,
	0xed, 0x92, 0xdc, 0x60, 0x74, 0xc9, 0x39, 0x19, 0xf7, 0xa5, 0xfd, 0xd2, 0xa6, 0xcf, 0x76, 0x50,
	0x67, 0x9d, 0x1d, 0x7d, 0xbf, 0xff, 0xfd, 0x23, 0x9a, 0x64, 0x4f, 0xa9, 0xa1, 0xdf, 0xaf, 0xc4,
	0x9c, 0x2e, 0x5f, 0xda, 0x1f, 0xee, 0xf5, 0xe0, 0x94, 0xe4, 0x18, 0x5d, 0x89, 0x32, 0x54, 0xec,
	0x77, 0x2d, 0x54, 0x0c, 0xf6, 0x2a, 0x3b, 0xb6, 0x8a, 0xc9, 0xe9, 0xe4, 0x81, 0x22, 0xfd, 0x2a,
	0xf9, 0x37, 0xd3, 0xe5, 0x35, 0x6c, 0x75, 0xd9, 0x2f, 0x58, 0xa8, 0x19, 0x2c, 0x51, 0xd7, 0x65,
	0xfa, 0xf7, 0x2e, 0x6f, 0x30, 0xba, 0x6d, 0xd7, 0xa1, 0x62, 0x3f, 0xdf, 0x50, 0x31, 0x98, 0xc7,
	0xbf, 0xdf, 0x3d, 0x1f, 0xda, 0x5f, 0xff, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xb6,
	0xd2, 0x40, 0x80, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// RoleSrvClient is the client API for RoleSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleSrvClient interface {
	Add(ctx context.Context, in *RoleAddRequest, opts ...grpc.CallOption) (*RoleAddResponse, error)
	Del(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*RoleDelResponse, error)
	Mod(ctx context.Context, in *RoleModRequest, opts ...grpc.CallOption) (*RoleModResponse, error)
	Qry(ctx context.Context, in *RoleQryRequest, opts ...grpc.CallOption) (*RoleQryResponse, error)
	Close() error
}

type roleSrvClient struct {
	cc *grpc.ClientConn
}

// origin client method
func NewRoleSrvClient(cc *grpc.ClientConn) RoleSrvClient {
	return &roleSrvClient{cc}
}

// new client method
func NewAnkrRoleSrvClient(addr string) (RoleSrvClient, error) {
	c, err := grpc.Dial(addr, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	return &roleSrvClient{c}, nil
}

// new client close method
func (c *roleSrvClient) Close() error {
	return c.cc.Close()
}

func (c *roleSrvClient) Add(ctx context.Context, in *RoleAddRequest, opts ...grpc.CallOption) (*RoleAddResponse, error) {
	out := new(RoleAddResponse)
	err := c.cc.Invoke(ctx, "/rbac.RoleSrv/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSrvClient) Del(ctx context.Context, in *RoleDelRequest, opts ...grpc.CallOption) (*RoleDelResponse, error) {
	out := new(RoleDelResponse)
	err := c.cc.Invoke(ctx, "/rbac.RoleSrv/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSrvClient) Mod(ctx context.Context, in *RoleModRequest, opts ...grpc.CallOption) (*RoleModResponse, error) {
	out := new(RoleModResponse)
	err := c.cc.Invoke(ctx, "/rbac.RoleSrv/Mod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleSrvClient) Qry(ctx context.Context, in *RoleQryRequest, opts ...grpc.CallOption) (*RoleQryResponse, error) {
	out := new(RoleQryResponse)
	err := c.cc.Invoke(ctx, "/rbac.RoleSrv/Qry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleSrvServer is the server API for RoleSrv service.
type RoleSrvServer interface {
	Add(context.Context, *RoleAddRequest) (*RoleAddResponse, error)
	Del(context.Context, *RoleDelRequest) (*RoleDelResponse, error)
	Mod(context.Context, *RoleModRequest) (*RoleModResponse, error)
	Qry(context.Context, *RoleQryRequest) (*RoleQryResponse, error)
}

// UnimplementedRoleSrvServer can be embedded to have forward compatible implementations.
type UnimplementedRoleSrvServer struct {
}

func (*UnimplementedRoleSrvServer) Add(ctx context.Context, req *RoleAddRequest) (*RoleAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedRoleSrvServer) Del(ctx context.Context, req *RoleDelRequest) (*RoleDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedRoleSrvServer) Mod(ctx context.Context, req *RoleModRequest) (*RoleModResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mod not implemented")
}
func (*UnimplementedRoleSrvServer) Qry(ctx context.Context, req *RoleQryRequest) (*RoleQryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Qry not implemented")
}

func RegisterRoleSrvServer(s *grpc.Server, srv RoleSrvServer) {
	s.RegisterService(&_RoleSrv_serviceDesc, srv)
}

func _RoleSrv_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(RoleSrvServer).Add(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleSrv/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSrvServer).Add(ctx, req.(*RoleAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSrv_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(RoleSrvServer).Del(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleSrv/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSrvServer).Del(ctx, req.(*RoleDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSrv_Mod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(RoleSrvServer).Mod(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleSrv/Mod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSrvServer).Mod(ctx, req.(*RoleModRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleSrv_Qry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(RoleSrvServer).Qry(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleSrv/Qry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleSrvServer).Qry(ctx, req.(*RoleQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.RoleSrv",
	HandlerType: (*RoleSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RoleSrv_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _RoleSrv_Del_Handler,
		},
		{
			MethodName: "Mod",
			Handler:    _RoleSrv_Mod_Handler,
		},
		{
			MethodName: "Qry",
			Handler:    _RoleSrv_Qry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role.proto",
}
