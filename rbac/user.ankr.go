// Code generated by protoc-gen-ankr. DO NOT EDIT.
// source: proto/user.proto

package rbac

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	math "math"

	logger "github.com/Ankr-network/dccn-tools/logger"
	zap "github.com/Ankr-network/dccn-tools/zap"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	User                 string   `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Role                 string   `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	Status               int64    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *User) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *User) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *User) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UserAddRequest struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Role                 string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAddRequest) Reset()         { *m = UserAddRequest{} }
func (m *UserAddRequest) String() string { return proto.CompactTextString(m) }
func (*UserAddRequest) ProtoMessage()    {}
func (*UserAddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{1}
}

func (m *UserAddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAddRequest.Unmarshal(m, b)
}
func (m *UserAddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAddRequest.Marshal(b, m, deterministic)
}
func (m *UserAddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAddRequest.Merge(m, src)
}
func (m *UserAddRequest) XXX_Size() int {
	return xxx_messageInfo_UserAddRequest.Size(m)
}
func (m *UserAddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserAddRequest proto.InternalMessageInfo

func (m *UserAddRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UserAddRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserAddRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type UserAddResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserAddResponse) Reset()         { *m = UserAddResponse{} }
func (m *UserAddResponse) String() string { return proto.CompactTextString(m) }
func (*UserAddResponse) ProtoMessage()    {}
func (*UserAddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{2}
}

func (m *UserAddResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAddResponse.Unmarshal(m, b)
}
func (m *UserAddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAddResponse.Marshal(b, m, deterministic)
}
func (m *UserAddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAddResponse.Merge(m, src)
}
func (m *UserAddResponse) XXX_Size() int {
	return xxx_messageInfo_UserAddResponse.Size(m)
}
func (m *UserAddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserAddResponse proto.InternalMessageInfo

func (m *UserAddResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type UserDelRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserDelRequest) Reset()         { *m = UserDelRequest{} }
func (m *UserDelRequest) String() string { return proto.CompactTextString(m) }
func (*UserDelRequest) ProtoMessage()    {}
func (*UserDelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{3}
}

func (m *UserDelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDelRequest.Unmarshal(m, b)
}
func (m *UserDelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDelRequest.Marshal(b, m, deterministic)
}
func (m *UserDelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDelRequest.Merge(m, src)
}
func (m *UserDelRequest) XXX_Size() int {
	return xxx_messageInfo_UserDelRequest.Size(m)
}
func (m *UserDelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserDelRequest proto.InternalMessageInfo

func (m *UserDelRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserDelResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserDelResponse) Reset()         { *m = UserDelResponse{} }
func (m *UserDelResponse) String() string { return proto.CompactTextString(m) }
func (*UserDelResponse) ProtoMessage()    {}
func (*UserDelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{4}
}

func (m *UserDelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDelResponse.Unmarshal(m, b)
}
func (m *UserDelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDelResponse.Marshal(b, m, deterministic)
}
func (m *UserDelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDelResponse.Merge(m, src)
}
func (m *UserDelResponse) XXX_Size() int {
	return xxx_messageInfo_UserDelResponse.Size(m)
}
func (m *UserDelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserDelResponse proto.InternalMessageInfo

func (m *UserDelResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type UserModRequest struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserModRequest) Reset()         { *m = UserModRequest{} }
func (m *UserModRequest) String() string { return proto.CompactTextString(m) }
func (*UserModRequest) ProtoMessage()    {}
func (*UserModRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{5}
}

func (m *UserModRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserModRequest.Unmarshal(m, b)
}
func (m *UserModRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserModRequest.Marshal(b, m, deterministic)
}
func (m *UserModRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserModRequest.Merge(m, src)
}
func (m *UserModRequest) XXX_Size() int {
	return xxx_messageInfo_UserModRequest.Size(m)
}
func (m *UserModRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserModRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserModRequest proto.InternalMessageInfo

func (m *UserModRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserModResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserModResponse) Reset()         { *m = UserModResponse{} }
func (m *UserModResponse) String() string { return proto.CompactTextString(m) }
func (*UserModResponse) ProtoMessage()    {}
func (*UserModResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{6}
}

func (m *UserModResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserModResponse.Unmarshal(m, b)
}
func (m *UserModResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserModResponse.Marshal(b, m, deterministic)
}
func (m *UserModResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserModResponse.Merge(m, src)
}
func (m *UserModResponse) XXX_Size() int {
	return xxx_messageInfo_UserModResponse.Size(m)
}
func (m *UserModResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserModResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserModResponse proto.InternalMessageInfo

func (m *UserModResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

type UserQryRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Num                  int64    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserQryRequest) Reset()         { *m = UserQryRequest{} }
func (m *UserQryRequest) String() string { return proto.CompactTextString(m) }
func (*UserQryRequest) ProtoMessage()    {}
func (*UserQryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{7}
}

func (m *UserQryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQryRequest.Unmarshal(m, b)
}
func (m *UserQryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQryRequest.Marshal(b, m, deterministic)
}
func (m *UserQryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQryRequest.Merge(m, src)
}
func (m *UserQryRequest) XXX_Size() int {
	return xxx_messageInfo_UserQryRequest.Size(m)
}
func (m *UserQryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserQryRequest proto.InternalMessageInfo

func (m *UserQryRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *UserQryRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *UserQryRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type UserQryResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	Data                 []*User   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Total                int64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserQryResponse) Reset()         { *m = UserQryResponse{} }
func (m *UserQryResponse) String() string { return proto.CompactTextString(m) }
func (*UserQryResponse) ProtoMessage()    {}
func (*UserQryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{8}
}

func (m *UserQryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserQryResponse.Unmarshal(m, b)
}
func (m *UserQryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserQryResponse.Marshal(b, m, deterministic)
}
func (m *UserQryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserQryResponse.Merge(m, src)
}
func (m *UserQryResponse) XXX_Size() int {
	return xxx_messageInfo_UserQryResponse.Size(m)
}
func (m *UserQryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserQryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserQryResponse proto.InternalMessageInfo

func (m *UserQryResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *UserQryResponse) GetData() []*User {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserQryResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type UserListRequest struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserListRequest) Reset()         { *m = UserListRequest{} }
func (m *UserListRequest) String() string { return proto.CompactTextString(m) }
func (*UserListRequest) ProtoMessage()    {}
func (*UserListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{9}
}

func (m *UserListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserListRequest.Unmarshal(m, b)
}
func (m *UserListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserListRequest.Marshal(b, m, deterministic)
}
func (m *UserListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserListRequest.Merge(m, src)
}
func (m *UserListRequest) XXX_Size() int {
	return xxx_messageInfo_UserListRequest.Size(m)
}
func (m *UserListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserListRequest proto.InternalMessageInfo

func (m *UserListRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type UserListResponse struct {
	Rsp                  *Response `protobuf:"bytes,1,opt,name=rsp,proto3" json:"rsp,omitempty"`
	Data                 []*User   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserListResponse) Reset()         { *m = UserListResponse{} }
func (m *UserListResponse) String() string { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()    {}
func (*UserListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{10}
}

func (m *UserListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserListResponse.Unmarshal(m, b)
}
func (m *UserListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserListResponse.Marshal(b, m, deterministic)
}
func (m *UserListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserListResponse.Merge(m, src)
}
func (m *UserListResponse) XXX_Size() int {
	return xxx_messageInfo_UserListResponse.Size(m)
}
func (m *UserListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserListResponse proto.InternalMessageInfo

func (m *UserListResponse) GetRsp() *Response {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (m *UserListResponse) GetData() []*User {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "rbac.User")
	proto.RegisterType((*UserAddRequest)(nil), "rbac.UserAddRequest")
	proto.RegisterType((*UserAddResponse)(nil), "rbac.UserAddResponse")
	proto.RegisterType((*UserDelRequest)(nil), "rbac.UserDelRequest")
	proto.RegisterType((*UserDelResponse)(nil), "rbac.UserDelResponse")
	proto.RegisterType((*UserModRequest)(nil), "rbac.UserModRequest")
	proto.RegisterType((*UserModResponse)(nil), "rbac.UserModResponse")
	proto.RegisterType((*UserQryRequest)(nil), "rbac.UserQryRequest")
	proto.RegisterType((*UserQryResponse)(nil), "rbac.UserQryResponse")
	proto.RegisterType((*UserListRequest)(nil), "rbac.UserListRequest")
	proto.RegisterType((*UserListResponse)(nil), "rbac.UserListResponse")
}

func init() { proto.RegisterFile("proto/user.proto", fileDescriptor_d570e3e37e5899c5) }

var fileDescriptor_d570e3e37e5899c5 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x8b, 0x13, 0x31,
	0x18, 0x75, 0x26, 0xdd, 0x8a, 0x11, 0xd6, 0x1a, 0x6a, 0x19, 0x86, 0x65, 0x2d, 0x03, 0x8b, 0x65,
	0xa1, 0x8d, 0xee, 0x82, 0x07, 0x6f, 0x2b, 0x7b, 0x74, 0xc1, 0x1d, 0x15, 0xbd, 0x49, 0xba, 0x09,
	0x35, 0x38, 0x9d, 0x8c, 0x49, 0xa6, 0xa5, 0x94, 0x5e, 0x3c, 0x7a, 0xf5, 0xf7, 0xf8, 0x2b, 0xfc,
	0x01, 0x82, 0xf8, 0x43, 0x24, 0x49, 0xa7, 0x93, 0xb6, 0xbb, 0x4b, 0x0f, 0x7b, 0x9b, 0x7c, 0xef,
	0xcb, 0x7b, 0xef, 0xcb, 0xf7, 0x18, 0xd8, 0x2a, 0xa4, 0xd0, 0x02, 0x97, 0x8a, 0xc9, 0x81, 0xfd,
	0x44, 0x0d, 0x39, 0x24, 0x57, 0xf1, 0xcb, 0x11, 0xd7, 0x5f, 0xca, 0xe1, 0xe0, 0x4a, 0x8c, 0xf1,
	0x78, 0xca, 0xf5, 0x57, 0x31, 0xc5, 0x23, 0xd1, 0xb7, 0x2d, 0xfd, 0x09, 0xc9, 0x38, 0x25, 0x5a,
	0x48, 0x85, 0x57, 0x9f, 0xee, 0x76, 0x7c, 0x30, 0x12, 0x62, 0x94, 0x31, 0x4c, 0x0a, 0x8e, 0x49,
	0x9e, 0x0b, 0x4d, 0x34, 0x17, 0xb9, 0x5a, 0xa2, 0x6d, 0xa7, 0x26, 0x99, 0x2a, 0x44, 0xae, 0x98,
	0xab, 0x26, 0x3f, 0x02, 0xd8, 0xf8, 0xa0, 0x98, 0x44, 0x1d, 0x18, 0x72, 0x1a, 0x05, 0xdd, 0xa0,
	0x07, 0x5e, 0x37, 0xff, 0xfe, 0x79, 0x1a, 0xb6, 0xee, 0xa5, 0x21, 0xa7, 0x28, 0x86, 0x0d, 0x3d,
	0x2b, 0x58, 0x14, 0x76, 0x83, 0xde, 0x03, 0x87, 0x7c, 0x0a, 0x52, 0x5b, 0x33, 0x98, 0x31, 0x1f,
	0x81, 0x75, 0xcc, 0xd4, 0x0c, 0x26, 0x45, 0xc6, 0xa2, 0xc6, 0x3a, 0x66, 0x6a, 0xa8, 0x03, 0x9b,
	0x4a, 0x13, 0x5d, 0xaa, 0x68, 0xcf, 0xe8, 0xa5, 0xcb, 0x53, 0x42, 0xe1, 0xbe, 0xf1, 0x72, 0x46,
	0x69, 0xca, 0xbe, 0x95, 0x4c, 0xe9, 0x95, 0x7a, 0x70, 0x8b, 0x7a, 0x78, 0x8b, 0x3a, 0xd8, 0x56,
	0x4f, 0x4e, 0xe1, 0xa3, 0x95, 0x8a, 0x7b, 0x0b, 0xd4, 0x85, 0x40, 0xaa, 0xc2, 0xaa, 0x3c, 0x3c,
	0xd9, 0x1f, 0x98, 0x2d, 0x0c, 0x2a, 0x30, 0x35, 0x50, 0xd2, 0x73, 0xd6, 0xce, 0x59, 0x56, 0x59,
	0xbb, 0xe1, 0xc1, 0x2a, 0x7a, 0xdb, 0xb9, 0x33, 0xfd, 0x73, 0x47, 0x7f, 0x21, 0x56, 0x93, 0x1f,
	0x2e, 0xa7, 0x73, 0x97, 0xa0, 0xbb, 0x64, 0x7a, 0xdc, 0x84, 0x95, 0x8c, 0xbd, 0xb1, 0xb3, 0xcc,
	0xd0, 0xc9, 0x5c, 0xca, 0x99, 0xf7, 0xc0, 0x05, 0x19, 0xb1, 0x8d, 0x39, 0x6c, 0x0d, 0x45, 0x10,
	0xe4, 0xe5, 0xd8, 0xbe, 0x6f, 0x0d, 0x99, 0xd2, 0x6a, 0x2d, 0x60, 0x7b, 0x2d, 0x09, 0x77, 0xc6,
	0xac, 0xc6, 0xae, 0xc6, 0xcc, 0xb4, 0x94, 0x68, 0x12, 0x85, 0x5d, 0xb0, 0x39, 0xad, 0xa9, 0xa3,
	0x36, 0xdc, 0xd3, 0x42, 0x93, 0xcc, 0x2a, 0x82, 0xd4, 0x1d, 0x92, 0x23, 0x27, 0xf5, 0x86, 0x2b,
	0x5d, 0xcd, 0x83, 0xfc, 0xc0, 0x2c, 0x1d, 0xbd, 0x87, 0xad, 0xba, 0xed, 0xae, 0x2c, 0x9d, 0xfc,
	0x02, 0xf0, 0xbe, 0x39, 0xbe, 0x93, 0x13, 0xf4, 0x16, 0x82, 0x33, 0x4a, 0x51, 0xbb, 0x6e, 0xaa,
	0x33, 0x1c, 0x3f, 0xd9, 0xa8, 0x3a, 0x91, 0xe4, 0xe0, 0xfb, 0xef, 0x7f, 0x3f, 0xc3, 0x4e, 0xf2,
	0x18, 0x1b, 0xf8, 0xf3, 0x94, 0x0d, 0xf1, 0xe4, 0x85, 0xfd, 0x19, 0xbc, 0x0a, 0x8e, 0x51, 0x0a,
	0xc1, 0x39, 0xcb, 0x7c, 0xc6, 0x3a, 0x7a, 0x3e, 0xa3, 0x17, 0xb3, 0xe4, 0xd0, 0x32, 0x46, 0xc7,
	0x9d, 0x2d, 0x46, 0x3c, 0xe7, 0x74, 0x61, 0x5c, 0x5e, 0x88, 0x35, 0x97, 0x75, 0xde, 0x7c, 0x4e,
	0x2f, 0x53, 0x95, 0xcb, 0xf8, 0x7a, 0x97, 0x04, 0x82, 0x4b, 0x39, 0xf3, 0x19, 0xeb, 0x68, 0xf9,
	0x8c, 0x5e, 0x18, 0x92, 0xbe, 0x65, 0x7c, 0x86, 0x8e, 0xae, 0x71, 0x69, 0xd6, 0xb5, 0xc0, 0x73,
	0x93, 0xbe, 0x05, 0x9e, 0xe7, 0xe5, 0x78, 0x81, 0x3e, 0xc2, 0x86, 0x59, 0x1c, 0xf2, 0xd8, 0xbc,
	0x7d, 0xc7, 0x9d, 0xcd, 0xf2, 0x52, 0xa5, 0x6b, 0x55, 0x62, 0x14, 0xdd, 0xa4, 0x32, 0x6c, 0xda,
	0x1f, 0xe0, 0xe9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0xf7, 0x2a, 0x64, 0x86, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// UserSrvClient is the client API for UserSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSrvClient interface {
	Add(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*UserAddResponse, error)
	Del(ctx context.Context, in *UserDelRequest, opts ...grpc.CallOption) (*UserDelResponse, error)
	Mod(ctx context.Context, in *UserModRequest, opts ...grpc.CallOption) (*UserModResponse, error)
	Qry(ctx context.Context, in *UserQryRequest, opts ...grpc.CallOption) (*UserQryResponse, error)
	List(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	Close() error
}

type userSrvClient struct {
	cc *grpc.ClientConn
}

// origin client method
func NewUserSrvClient(cc *grpc.ClientConn) UserSrvClient {
	return &userSrvClient{cc}
}

// new client method
func NewAnkrUserSrvClient(addr string) (UserSrvClient, error) {
	c, err := grpc.Dial(addr, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	return &userSrvClient{c}, nil
}

// new client close method
func (c *userSrvClient) Close() error {
	return c.cc.Close()
}

func (c *userSrvClient) Add(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*UserAddResponse, error) {
	out := new(UserAddResponse)
	err := c.cc.Invoke(ctx, "/rbac.UserSrv/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvClient) Del(ctx context.Context, in *UserDelRequest, opts ...grpc.CallOption) (*UserDelResponse, error) {
	out := new(UserDelResponse)
	err := c.cc.Invoke(ctx, "/rbac.UserSrv/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvClient) Mod(ctx context.Context, in *UserModRequest, opts ...grpc.CallOption) (*UserModResponse, error) {
	out := new(UserModResponse)
	err := c.cc.Invoke(ctx, "/rbac.UserSrv/Mod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvClient) Qry(ctx context.Context, in *UserQryRequest, opts ...grpc.CallOption) (*UserQryResponse, error) {
	out := new(UserQryResponse)
	err := c.cc.Invoke(ctx, "/rbac.UserSrv/Qry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSrvClient) List(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/rbac.UserSrv/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSrvServer is the server API for UserSrv service.
type UserSrvServer interface {
	Add(context.Context, *UserAddRequest) (*UserAddResponse, error)
	Del(context.Context, *UserDelRequest) (*UserDelResponse, error)
	Mod(context.Context, *UserModRequest) (*UserModResponse, error)
	Qry(context.Context, *UserQryRequest) (*UserQryResponse, error)
	List(context.Context, *UserListRequest) (*UserListResponse, error)
}

// UnimplementedUserSrvServer can be embedded to have forward compatible implementations.
type UnimplementedUserSrvServer struct {
}

func (*UnimplementedUserSrvServer) Add(ctx context.Context, req *UserAddRequest) (*UserAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedUserSrvServer) Del(ctx context.Context, req *UserDelRequest) (*UserDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedUserSrvServer) Mod(ctx context.Context, req *UserModRequest) (*UserModResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mod not implemented")
}
func (*UnimplementedUserSrvServer) Qry(ctx context.Context, req *UserQryRequest) (*UserQryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Qry not implemented")
}
func (*UnimplementedUserSrvServer) List(ctx context.Context, req *UserListRequest) (*UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterUserSrvServer(s *grpc.Server, srv UserSrvServer) {
	s.RegisterService(&_UserSrv_serviceDesc, srv)
}

func _UserSrv_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(UserSrvServer).Add(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.UserSrv/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).Add(ctx, req.(*UserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSrv_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(UserSrvServer).Del(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.UserSrv/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).Del(ctx, req.(*UserDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSrv_Mod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(UserSrvServer).Mod(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.UserSrv/Mod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).Mod(ctx, req.(*UserModRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSrv_Qry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(UserSrvServer).Qry(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.UserSrv/Qry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).Qry(ctx, req.(*UserQryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSrv_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	//if exist trace id then set new span id, else set the entire id values
	m := make(map[string]string)
	if md, ok := metadata.FromIncomingContext(ctx); ok {
		if vs := md.Get(logger.TraceID); len(vs) > 0 {
			m[logger.TraceID] = vs[len(vs)-1]
		} else {
			m[logger.TraceID] = l.Generate().String()
		}
		if vs := md.Get(logger.SpanID); len(vs) > 0 {
			m[logger.ParentSpanID] = vs[len(vs)-1]
		} else {
			m[logger.ParentSpanID] = l.Generate().String()
		}
	}
	m[logger.SpanID] = l.Generate().String()
	ctx = metadata.NewIncomingContext(ctx, metadata.New(m))
	if interceptor == nil {
		// output request
		reqBody, err := json.Marshal(&in)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "request"))
		} else {
			l.Info(ctx, string(reqBody), zap.String("type", "request"))
		}
		rsp, err := srv.(UserSrvServer).List(ctx, in)
		// output response
		rspBody, err := json.Marshal(&rsp)
		if err != nil {
			l.Error(ctx, err.Error(), zap.String("type", "response"))
		} else {
			l.Info(ctx, string(rspBody), zap.String("type", "response"))
		}
		return rsp, err
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.UserSrv/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSrvServer).List(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.UserSrv",
	HandlerType: (*UserSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _UserSrv_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _UserSrv_Del_Handler,
		},
		{
			MethodName: "Mod",
			Handler:    _UserSrv_Mod_Handler,
		},
		{
			MethodName: "Qry",
			Handler:    _UserSrv_Qry_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserSrv_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
